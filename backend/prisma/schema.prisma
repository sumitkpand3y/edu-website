generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(STUDENT)
  avatar    String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments  Enrollment[]
  orders       Order[]
  certificates Certificate[]
  blogPosts    BlogPost[]
  cartItems    CartItem[]    @relation("UserCartItems")

  @@map("users")
}

model Course {
  id               String       @id @default(cuid())
  title            String
  slug             String       @unique
  subtitle         String?
  description      String?
  longDescription  String?
  shortDescription String?
  thumbnail        String?
  image            String?
  price            Float
  originalPrice    Float
  duration         Int
  level            Level        @default(BEGINNER)
  status           CourseStatus @default(DRAFT)
  category         String
  provider         String?
  isPublished      Boolean      @default(false)
  batchStartDate   DateTime?
  nextReviewDate   DateTime?
  rating           Float        @default(0)
  reviews          Int          @default(0)
  enrolledStudents Int          @default(0)
  featured         Boolean      @default(false)
  about            String?
  outcomes         String[]
  targetAudience   String?
  knowledgePartner String?
  prerequisites    String?
  passingPercent   Int          @default(70)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  curriculum       Json?

  // Relations
  tags         Tag[]
  faqs         Faq[]
  faculty      Faculty[]
  modules      Module[]
  resources    Resource[]
  enrollments  Enrollment[]
  orderItems   OrderItem[]
  certificates Certificate[]

  relatedCourses      Course[]   @relation("CourseToRelatedCourses")
  relatedToThisCourse Course[]   @relation("CourseToRelatedCourses")
  cartItems           CartItem[] @relation("CourseCartItems") //

  @@map("courses")
}

model Tag {
  id       String @id @default(cuid())
  name     String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([name, courseId])
  @@map("tags")
}

model Faq {
  id       String @id @default(cuid())
  question String
  answer   String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("faqs")
}

model Faculty {
  id         String @id @default(cuid())
  name       String
  title      String
  department String
  bio        String
  courseId   String
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("faculty")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Module content
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  content   String // HTML content
  videoUrl  String?
  duration  Int? // in minutes
  order     Int
  moduleId  String
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Progress tracking
  progress LessonProgress[]

  @@map("lessons")
}

model LessonProgress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Resource {
  id        String       @id @default(cuid())
  title     String
  type      ResourceType
  url       String
  courseId  String
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())

  @@map("resources")
}

model Enrollment {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  status      EnrollmentStatus @default(ACTIVE)
  progress    Float            @default(0) // 0-100
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?
  updatedAt   DateTime         @updatedAt

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount Float
  status      OrderStatus @default(PENDING)
  paymentId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Order items
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  price    Float

  @@map("order_items")
}

model Certificate {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  issueDate      DateTime @default(now())
  certificateUrl String?
  isVerified     Boolean  @default(true)

  @@unique([userId, courseId])
  @@map("certificates")
}

model BlogPost {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique
  excerpt     String
  content     String
  category    String
  isPublished Boolean    @default(false)
  image       String
  date        DateTime
  readTime    String
  status      BlogStatus @default(DRAFT)

  tags      BlogTag[] @relation("BlogPostTags")
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model BlogTag {
  id        Int        @id @default(autoincrement())
  name      String
  blogPosts BlogPost[] @relation("BlogPostTags")
}

model Partner {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  type        PartnerType
  logo        String      @db.VarChar(500)
  description String      @db.Text
  established String      @db.VarChar(4)
  location    String      @db.VarChar(200)
  website     String      @db.VarChar(300)
  email       String      @db.VarChar(100)
  phone       String      @db.VarChar(20)
  specialties String[] // Array of strings for PostgreSQL
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([type])
  @@index([name])
  @@index([isActive])
  @@map("partners")
}

enum PartnerType {
  KNOWLEDGE
  HOSPITAL
  FINANCE
}

model PartnerInquiry {
  id                      Int           @id @default(autoincrement())
  hospitalName            String        @db.VarChar(200)
  contactName             String        @db.VarChar(100)
  email                   String        @db.VarChar(100)
  phone                   String        @db.VarChar(20)
  designation             String        @db.VarChar(100)
  hospitalBedCount        String        @db.VarChar(20)
  purposeForCollaboration String        @db.VarChar(100)
  message                 String?       @db.Text
  status                  InquiryStatus @default(PENDING)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@index([status])
  @@index([createdAt])
  @@map("partner_inquiries")
}

enum InquiryStatus {
  PENDING
  CONTACTED
  IN_DISCUSSION
  APPROVED
  REJECTED
}

// Enums
enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

enum ResourceType {
  PDF
  VIDEO
  LINK
  DOCUMENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  SUSPENDED
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)
  userId   String
  courseId String

  user   User   @relation("UserCartItems", fields: [userId], references: [id])
  course Course @relation("CourseCartItems", fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // prevent duplicates
}
